public class BinaryHeap {
	
	private int[] arr;
	private int size;
	
	public BinaryHeap() {
		arr = new int[10];
		size = 0;
	}
	public void add(int item) {
		if(size == arr.length) {
			growArray();
		}
		arr[size] = item;
		size++;
		if(size >= 2) {
			swapUp(parent(size), size - 1);
		}
	}
	
	public int remove() {
		int temp = arr[0];
		arr[0] = arr[size];
		size--;
		swapDown(0, rightChild(0));
		
		return temp;
	}
	
	public void growArray() {
		int[] newArr = new int[size * 2];
		System.arraycopy(arr, 0, newArr, 0, size);
		arr = newArr;
	}
	
	public boolean empty(){
		if (Integer.valueOf(arr[0]) == null) {
			return true;
		}
		return false;
	}
	
	public void swapUp(int parent, int child) {
		//if (child < size) {
			// && parent < size
			while (child > 0 && arr[parent] > arr[child]) { // index out of bounds
				int temp = arr[parent];
				arr[parent] = arr[child];
				arr[child] = temp;
				child = parent;
				parent = parent(parent);
			}
		//}
	}
	
	public void swapDown(int parent, int child) {
		while(arr[parent] > arr[child]) {
			int temp = arr[child];
			arr[child] = arr[parent];
			arr[parent] = arr[child];

		}
	}
	
	public int leftChild(int parent){
		return parent * 2;
		//return parent * 2 + 1;
	}
	
	public int rightChild(int parent){
		return parent * 2 + 1;
		//return parent * 2 + 2;
	}
	
	public int parent(int child){
		if (child == 2) {
			return 0;
		} else {
			return (child)/2;
		}
	}
	
	
}
